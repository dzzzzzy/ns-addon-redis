{"version":3,"sources":["../src/redis.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,2CAAoD;AAGpD,uDAAyD;AAGzD,IAAa,YAAY,GAAzB,MAAa,YAAY;IACrB,YACmD,WAAkB;QAAlB,gBAAW,GAAX,WAAW,CAAO;IACjE,CAAC;IAEL,KAAK,CAAC,IAAI,CAAC,GAAY,EAAE,KAAa;QAClC,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,GAAY,EAAE,KAAa,EAAE,KAAU;QAC9C,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;CACJ,CAAA;AAZY,YAAY;IADxB,mBAAU,EAAE;IAGJ,WAAA,eAAM,CAAC,sCAAoB,CAAC,CAAA;;GAFxB,YAAY,CAYxB;AAZY,oCAAY","file":"redis.service.js","sourcesContent":["import { Inject, Injectable } from '@nestjs/common';\nimport { KeyType, Redis } from 'ioredis';\n\nimport { REDIS_PROVIDER_TOKEN } from './redis.constants';\n\n@Injectable()\nexport class RedisService {\n    constructor(\n        @Inject(REDIS_PROVIDER_TOKEN) private readonly redisClient: Redis\n    ) { }\n\n    async hget(key: KeyType, field: string): Promise<string> {\n        return this.redisClient.hget(key, field);\n    }\n\n    async hset(key: KeyType, field: string, value: any): Promise<0 | 1> {\n        return this.redisClient.hset(key, field, value);\n    }\n}"]}